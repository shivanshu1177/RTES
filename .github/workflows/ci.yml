name: RTES CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc-11, clang-13]
        build_type: [Release, Debug]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgtest-dev \
          pkg-config \
          valgrind \
          clang-13 \
          gcc-11 \
          g++-11
    
    - name: Setup compiler
      run: |
        if [[ "${{ matrix.compiler }}" == "clang-13" ]]; then
          echo "CC=clang-13" >> $GITHUB_ENV
          echo "CXX=clang++-13" >> $GITHUB_ENV
        else
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        fi
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ env.CC }} \
          -DCMAKE_CXX_COMPILER=${{ env.CXX }}
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc)
    
    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel $(nproc)
    
    - name: Run memory leak check (Debug only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc-11'
      run: |
        cd build
        valgrind --tool=memcheck --leak-check=full --error-exitcode=1 \
          ./rtes_tests --gtest_filter="*Test.*:-*DISABLED_*"
    
    - name: Run benchmarks
      if: matrix.build_type == 'Release'
      run: |
        cd build
        timeout 30s ./bench_memory_pool || true
        timeout 30s ./bench_matching || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: build/Testing/

  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev pkg-config
    
    - name: Build Release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build -j$(nproc)
    
    - name: Start exchange in background
      run: |
        cd build
        ./trading_exchange ../configs/config.json &
        echo $! > exchange.pid
        sleep 5  # Wait for startup
    
    - name: Run integration tests
      run: |
        cd build
        
        # Test TCP connectivity
        timeout 10s ./tcp_client localhost 8888 < /dev/null || true
        
        # Test UDP market data
        timeout 10s ./udp_receiver 239.0.0.1 9999 &
        UDP_PID=$!
        
        # Run client simulator
        timeout 15s ./client_simulator --strategy liquidity_taker --symbol AAPL --duration 10 || true
        
        # Check metrics endpoint
        curl -f http://localhost:8080/metrics > /dev/null
        curl -f http://localhost:8080/health > /dev/null
        
        kill $UDP_PID 2>/dev/null || true
    
    - name: Stop exchange
      run: |
        cd build
        if [ -f exchange.pid ]; then
          kill $(cat exchange.pid) 2>/dev/null || true
          rm exchange.pid
        fi
    
    - name: Check for core dumps
      run: |
        if ls core* 1> /dev/null 2>&1; then
          echo "Core dumps found!"
          exit 1
        fi

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t rtes:latest .
        docker build -f docker/Dockerfile.dev -t rtes:dev .
    
    - name: Test Docker image
      run: |
        # Test that the image runs
        docker run --rm rtes:latest --help || true
        
        # Test configuration validation
        docker run --rm -v $(pwd)/configs:/configs rtes:latest /configs/config.json &
        CONTAINER_ID=$!
        sleep 10
        docker stop $CONTAINER_ID || true
    
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'rtes:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev pkg-config
    
    - name: Build optimized
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-march=native -O3"
        cmake --build build -j$(nproc)
    
    - name: Run performance benchmarks
      run: |
        cd build
        
        echo "=== Memory Pool Benchmark ===" > perf_results.txt
        ./bench_memory_pool >> perf_results.txt
        
        echo "=== Matching Engine Benchmark ===" >> perf_results.txt
        ./bench_matching >> perf_results.txt
        
        # Start exchange for end-to-end benchmark
        ./trading_exchange ../configs/config.json &
        EXCHANGE_PID=$!
        sleep 5
        
        echo "=== End-to-End Benchmark ===" >> perf_results.txt
        timeout 30s ./bench_exchange --symbols AAPL --orders 100000 >> perf_results.txt || true
        
        kill $EXCHANGE_PID 2>/dev/null || true
        
        cat perf_results.txt
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: build/perf_results.txt

  release:
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build release artifacts
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build -j$(nproc)
        
        # Create release package
        mkdir -p rtes-release/bin rtes-release/configs rtes-release/tools
        cp build/trading_exchange rtes-release/bin/
        cp build/client_simulator rtes-release/bin/
        cp build/load_generator rtes-release/bin/
        cp build/tcp_client rtes-release/bin/
        cp build/udp_receiver rtes-release/bin/
        cp configs/* rtes-release/configs/
        cp tools/*.py rtes-release/tools/
        cp README.md LICENSE rtes-release/
        
        tar -czf rtes-linux-x64.tar.gz rtes-release/
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rtes-release
        path: rtes-linux-x64.tar.gz